##############################################################################
MD5 信息摘要算法
##############################################################################

::

    Network Working Group                                          R. Rivest
    Request for Comments: 1321           MIT Laboratory for Computer Science
                                                 and RSA Data Security, Inc.
                                                                  April 1992


关于本备忘录
    本备忘录为 Internet 社区提供信息 。 它没有指定一个 Internet 标准 。 分发本备忘\
    录是没有限制的 。 

致谢
    我们对提出许多有益的意见和建议的 Don Coppersmith , Burt Kaliski , \
    Ralph Merkle , David Chaum , 和 Noam Nisan 表示感谢 。 

目录

.. contents::

******************************************************************************
1. 执行摘要
******************************************************************************

本文档记述了 MD5 信息摘要算法 。 该算法将任意长度的信息作为输入 ， 并输出一个输入信\
息的 128 位的 "指纹" 或者 "信息摘要" 。 据推测 ， 生成两个具有相同信息摘要的信息 ， \
或者生成预定目标信息摘要的任何信息 ， 在计算上是不可行的 。 MD5 算法适用于应用程序的\
数字签名 ， 在使用诸如 RSA 之类的公钥加密系统的私有 (秘密) 秘钥对其进行加密之前 ， \
必须先以安全的方式压缩大文件 。 

MD5 算法被设计的非常快在 32 位计算机上 。 另外 ， MD5 算法不需要任何庞大的置换表 ； \
该算法可以非常紧凑地编码 。 

MD5 算法是 MD4 信息摘要算法 [1]_ [2]_ 的拓展 。 MD5 算法稍慢于 MD4 算法 ， 但是在\
设计上更为 "保守" 。 MD5 算法之所以被设计 ， 是因为人们认为 MD4 算法可能被采纳为比\
现有的重要审查所证明的合理的速度还要快 ； 正因为 MD4 被设计地出乎意料的快 ， 所以在\
成功的密码分析攻击分析方面 ， 它处于 "边缘" 。 MD5 稍微后退了一点儿 ， 为了提高最终\
安全性而放弃了一些速度 。 它包含了各位审阅者提出的一些建议 ， 并包含了额外的优化 。 \
MD5 算法正在公共领域中进行审查 ， 并有可能被采纳为标准 。 

对于基于 OSI 的应用程序 ， MD5 的对象标识符为 ：

.. code-block:: 

    md5 OBJECT IDENTIFIER ::=
    iso(1) member-body(2) US(840) rsadsi(113549) digestAlgorithm(2) 5}

在 X.509 类型的算法识别符 [3]_ 中 ， MD5 算法的参数应该包含 NULL 类型 。 

******************************************************************************
2. 术语和符号
******************************************************************************

在本文档中 ， 一个 "字 (word)" 是 32 位长度 ， 一个 "字节 (byte)" 是 8 位长度 。 \
可以按自然的方式将位 (bit) 序列解释为字节序列 ， 其中 ， 每 8 位连续的位被解释为一个\
字节 ， 每个字节的高位 (最高有效位) 位于第一位 。 相似地 ， 字节序列可以解释为 32 \
位的字序列 ， 其中每 4 个连续的字节被解释为一个字 ， 每个字的低位 (最低有效位) 位于\
第一位 。 

用 x_i 表示 "x 的下标 i" ， 如果下标是一个表达式 ， 我们将它放在大括号内 ， 如 \
``x_{i+1}`` 。 同样地 ， 我们使用 ``^`` 表示上标 (取幂) ， 以便 x^i 表示 x 的第 \
i 次幂 。 

令符号 "+" 表示字的加法运算 (即模 2^32 加法) 。 令 ``X <<< s`` 表示通过将 X 向左循\
环移位 s 个位而取得 32 位的值 。 令 ``not(x)`` 表示 x 的按位补码 ， 令 ``X v Y`` \
表示 X 和 Y 的按位或运算 。 令 ``X xor Y`` 表示 X 和 Y 的按位异或运算 ， ``XY`` \
表示 X 和 Y 的按位与运算 。

******************************************************************************
3. MD5 算法描述
******************************************************************************

首先我们假设有一个 b 位的信息作为输入，并且希望找到其信息摘要。这里的 b 是一个任意\
的非负整数；b 可以为零，不必为 8 的倍数，而且可以任意大。我们假设将消息的各个部分记\
录如下:

    m_0 m_1 ... m_{b-1}

接下来的 5 个步骤来计算消息的信息摘要。

3.1 步骤 1. 填充比特
~~~~~~~~~~~~~~~~~~~~~

对该消息进行“填充（拓展）”，以使其长度（以 bit 为单位）等于 448，以512为模。即，\
对该消息进行拓展，使它的长度比 512 位的整数倍长度少 64 位。消息填充是始终进行的，\
即使消息的长度已经等于 448（以512位模）。

填充操作如下：将单个的 "1" 添加到消息中，然后添加 "0"，以使填充消息的位长度等于 \
448，模数为 512。总之，至少 1 位，至多 512 位会被填充。

3.2 步骤 2. 附加长度
~~~~~~~~~~~~~~~~~~~~~

b 的 64 位表示形式（填充数据之前）将附加到上一步的结果中。如果 b 大于 2^64，则\
仅使用 b 的低 64 位（根据以前的惯例，这些位被附加为两个 32 字，并首先附加到低位。）

此时，结果消息（用位填充和 b 填充之后）的长度时 512 位的精确倍数。同样，此消息的\
长度是 16 （32 位）字的整数倍。令 M[0 ... N-1] 表示结果消息的字，其中 N 是 16 \
的倍数。

3.3 步骤 3. 初始化 MD 缓冲区
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

一个四字缓冲区（A, B, C, D）用于计算信息摘要。在此，A, B, C, D 均为 32 位寄存\
器。这些寄存器被初始化为以下值（十六进制，低位在前）：

.. code-block:: 

    A: 01 23 45 67
    B: 89 ab cd ef
    C: fe dc ba 98
    D: 76 54 32 10

3.4 步骤 4. 以 16 字块形式处理消息
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

我们首先定义四个辅助函数，每个辅助函数将三个32位字作为输入，并产生一个32位字作为\
输出。

.. code-block:: 

    F(X,Y,Z) = XY v not(X) Z
    G(X,Y,Z) = XZ v Y not(Z)
    H(X,Y,Z) = X xor Y xor Z
    I(X,Y,Z) = Y xor (X v not(Z))

*这一段不知道怎么翻译*

In each bit position F acts as a conditional: if X then Y else Z.
The function F could have been defined using + instead of v since XY
and not(X)Z will never have 1's in the same bit position.) It is
interesting to note that if the bits of X, Y, and Z are independent
and unbiased, the each bit of F(X,Y,Z) will be independent and
unbiased.

The functions G, H, and I are similar to the function F, in that they
act in "bitwise parallel" to produce their output from the bits of X,
Y, and Z, in such a manner that if the corresponding bits of X, Y,
and Z are independent and unbiased, then each bit of G(X,Y,Z),
H(X,Y,Z), and I(X,Y,Z) will be independent and unbiased. Note that
the function H is the bit-wise "xor" or "parity" function of its
inputs.

This step uses a 64-element table T[1 ... 64] constructed from the
sine function. Let T[i] denote the i-th element of the table, which
is equal to the integer part of 4294967296 times abs(sin(i)), where i
is in radians. The elements of the table are given in the appendix.

Do the following:

.. code-block:: 

    /* Process each 16-word block. */
    For i = 0 to N/16-1 do

        /* Copy block i into X. */
        For j = 0 to 15 do
            Set X[j] to M[i*16+j].
        end /* of loop on j */

        /* Save A as AA, B as BB, C as CC, and D as DD. */
        AA = A
        BB = B

        CC = C
        DD = D

        /* Round 1. */
        /* Let [abcd k s i] denote the operation
            a = b + ((a + F(b,c,d) + X[k] + T[i]) <<< s). */
        /* Do the following 16 operations. */
        [ABCD  0  7  1]  [DABC  1 12  2]  [CDAB  2 17  3]  [BCDA  3 22  4]
        [ABCD  4  7  5]  [DABC  5 12  6]  [CDAB  6 17  7]  [BCDA  7 22  8]
        [ABCD  8  7  9]  [DABC  9 12 10]  [CDAB 10 17 11]  [BCDA 11 22 12]
        [ABCD 12  7 13]  [DABC 13 12 14]  [CDAB 14 17 15]  [BCDA 15 22 16]

        /* Round 2. */
        /* Let [abcd k s i] denote the operation
            a = b + ((a + G(b,c,d) + X[k] + T[i]) <<< s). */
        /* Do the following 16 operations. */
        [ABCD  1  5 17]  [DABC  6  9 18]  [CDAB 11 14 19]  [BCDA  0 20 20]
        [ABCD  5  5 21]  [DABC 10  9 22]  [CDAB 15 14 23]  [BCDA  4 20 24]
        [ABCD  9  5 25]  [DABC 14  9 26]  [CDAB  3 14 27]  [BCDA  8 20 28]
        [ABCD 13  5 29]  [DABC  2  9 30]  [CDAB  7 14 31]  [BCDA 12 20 32]

        /* Round 3. */
        /* Let [abcd k s t] denote the operation
            a = b + ((a + H(b,c,d) + X[k] + T[i]) <<< s). */
        /* Do the following 16 operations. */
        [ABCD  5  4 33]  [DABC  8 11 34]  [CDAB 11 16 35]  [BCDA 14 23 36]
        [ABCD  1  4 37]  [DABC  4 11 38]  [CDAB  7 16 39]  [BCDA 10 23 40]
        [ABCD 13  4 41]  [DABC  0 11 42]  [CDAB  3 16 43]  [BCDA  6 23 44]
        [ABCD  9  4 45]  [DABC 12 11 46]  [CDAB 15 16 47]  [BCDA  2 23 48]

        /* Round 4. */
        /* Let [abcd k s t] denote the operation
            a = b + ((a + I(b,c,d) + X[k] + T[i]) <<< s). */
        /* Do the following 16 operations. */
        [ABCD  0  6 49]  [DABC  7 10 50]  [CDAB 14 15 51]  [BCDA  5 21 52]
        [ABCD 12  6 53]  [DABC  3 10 54]  [CDAB 10 15 55]  [BCDA  1 21 56]
        [ABCD  8  6 57]  [DABC 15 10 58]  [CDAB  6 15 59]  [BCDA 13 21 60]
        [ABCD  4  6 61]  [DABC 11 10 62]  [CDAB  2 15 63]  [BCDA  9 21 64]

        /* Then perform the following additions. (That is increment each
            of the four registers by the value it had before this block
            was started.) */
        A = A + AA
        B = B + BB
        C = C + CC
        D = D + DD

    end /* of loop on i */

3.5 步骤 5. 输出
~~~~~~~~~~~~~~~~~~~~~

该信息摘要输出的是 A, B, C, D。也就是说，以 A 的低位字节开始，以 D 的高位字节结束。

这样就完成了对 MD5 的描述。附录中提供了 C 语言的参考实例。

.. _摘要:

.. 摘要

4. 摘要
---------

MD5信息摘要算法是易于实现的，并可以为任意长度的消息提供“指纹”或信息摘要。 可以推测\
得出具有相同消息摘要的两个消息的难度约为 2 ^ 64 次操作，得出具有给定消息摘要的任何\
消息的难度约为 2 ^ 128 次操作操作。 已经仔细检查了MD5算法的弱点。 但是，这是一种相\
对较新的算法，并且与任何此类新提议一样，当然有必要进行进一步的安全性分析。

.. _MD4 和 MD5 的差异:

.. MD4 和 MD5 的差异

5. MD4 和 MD5 的差异
--------------------

以下是MD4和MD5之间的区别：

1. 增加了第四轮

2. 现在每个步骤都有一个唯一的加性常数。

3. 第二轮中的函数 G 从 ``(XY v XX v YZ)`` 更改为 ``(XY v Y not(Z))`` ，以\
   使 G 的对称性降低。

4. 现在，每个步骤都会添加上一步的结果。 这促进了更快的“雪崩效应”。

5. 在第二轮和第三轮中，更改了输入字的访问顺序，以使这些模型彼此之间的相似度降低。

6. 每个回合中的偏移量已被近似优化，以产生更快的“雪崩效应”。 不同回合中的偏移是不同的。

.. _参考文献:

参考文献


.. [1] Rivest, R., "The MD4 Message Digest Algorithm",RFC 1320, MIT and RSA \
       Data Security, Inc., April 1992.

.. [2] Rivest, R., "The MD4 message digest algorithm", in A.J.  Menezes and \
       S.A. Vanstone, editors, Advances in Cryptology - CRYPTO '90 \
       Proceedings, pages 303-311, Springer-Verlag, 1991.

.. [3] CCITT Recommendation X.509 (1988), "The Directory Authentication \
       Framework."

.. _附录 A - 参考实例:

附录 A - 参考实例
-------------------

本附录包含以下来自 RSAREF 的文件： A Cryptographic Toolkit for Privacy-Enhanced Mail:

    global.h -- global header file

    md5.h -- header file for MD5

    md5c.c -- source code for MD5

有关 RSAREF 的更多信息，请发送电子邮件至<rsaref@rsa.com>。

附录还包括以下文件：

    mddriver.c -- test driver for MD2, MD4 and MD5

默认情况下，驱动程序针对MD5进行编译，但如果在C编译器命令行上将符号MD定义为2或4，\
则可以针对MD2或MD4进行编译。

该实现是可移植的，并且可以在许多不同的平台上工作。然而，优化特定平台上的实现并不困\
难，这是留给读者的练习。例如，在 “小端对齐” 平台上，其中32位字中的最低寻址字节是最\
低有效字节，并且没有对齐限制，可以将MD5Transform中对Decode的调用替换为类型转换。

A.1 global.h
~~~~~~~~~~~~~

.. code-block:: c

    /* GLOBAL.H - RSAREF types and constants
    */

    /* PROTOTYPES should be set to one if and only if the compiler supports
    function argument prototyping.
    The following makes PROTOTYPES default to 0 if it has not already

    been defined with C compiler flags.
    */
    #ifndef PROTOTYPES
    #define PROTOTYPES 0
    #endif

    /* POINTER defines a generic pointer type */
    typedef unsigned char *POINTER;

    /* UINT2 defines a two byte word */
    typedef unsigned short int UINT2;

    /* UINT4 defines a four byte word */
    typedef unsigned long int UINT4;

    /* PROTO_LIST is defined depending on how PROTOTYPES is defined above.
    If using PROTOTYPES, then PROTO_LIST returns the list, otherwise it
    returns an empty list.
    */
    #if PROTOTYPES
    #define PROTO_LIST(list) list
    #else
    #define PROTO_LIST(list) ()
    #endif

A.2 md5.h
~~~~~~~~~~~

.. code-block:: c

    /* MD5.H - header file for MD5C.C
    */

    /* Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
    rights reserved.

    License to copy and use this software is granted provided that it
    is identified as the "RSA Data Security, Inc. MD5 Message-Digest
    Algorithm" in all material mentioning or referencing this software
    or this function.

    License is also granted to make and use derivative works provided
    that such works are identified as "derived from the RSA Data
    Security, Inc. MD5 Message-Digest Algorithm" in all material
    mentioning or referencing the derived work.

    RSA Data Security, Inc. makes no representations concerning either
    the merchantability of this software or the suitability of this
    software for any particular purpose. It is provided "as is"
    without express or implied warranty of any kind.

    These notices must be retained in any copies of any part of this
    documentation and/or software.
    */

    /* MD5 context. */
    typedef struct {
        UINT4 state[4];                                   /* state (ABCD) */
        UINT4 count[2];        /* number of bits, modulo 2^64 (lsb first) */
        unsigned char buffer[64];                         /* input buffer */
    } MD5_CTX;

    void MD5Init PROTO_LIST ((MD5_CTX *));
    void MD5Update PROTO_LIST ((MD5_CTX *, unsigned char *, unsigned int));
    void MD5Final PROTO_LIST ((unsigned char [16], MD5_CTX *));

A.3 md5c.c
~~~~~~~~~~~

.. code-block:: c

    /* MD5C.C - RSA Data Security, Inc., MD5 message-digest algorithm
    */

    /* Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
    rights reserved.

    License to copy and use this software is granted provided that it
    is identified as the "RSA Data Security, Inc. MD5 Message-Digest
    Algorithm" in all material mentioning or referencing this software
    or this function.

    License is also granted to make and use derivative works provided
    that such works are identified as "derived from the RSA Data
    Security, Inc. MD5 Message-Digest Algorithm" in all material
    mentioning or referencing the derived work.

    RSA Data Security, Inc. makes no representations concerning either
    the merchantability of this software or the suitability of this
    software for any particular purpose. It is provided "as is"
    without express or implied warranty of any kind.

    These notices must be retained in any copies of any part of this
    documentation and/or software.
    */

    #include "global.h"
    #include "md5.h"

    /* Constants for MD5Transform routine.
    */

    #define S11 7
    #define S12 12
    #define S13 17
    #define S14 22
    #define S21 5
    #define S22 9
    #define S23 14
    #define S24 20
    #define S31 4
    #define S32 11
    #define S33 16
    #define S34 23
    #define S41 6
    #define S42 10
    #define S43 15
    #define S44 21

    static void MD5Transform PROTO_LIST ((UINT4 [4], unsigned char [64]));
    static void Encode PROTO_LIST ((unsigned char *, UINT4 *, unsigned int));
    static void Decode PROTO_LIST ((UINT4 *, unsigned char *, unsigned int));
    static void MD5_memcpy PROTO_LIST ((POINTER, POINTER, unsigned int));
    static void MD5_memset PROTO_LIST ((POINTER, int, unsigned int));

    static unsigned char PADDING[64] = {
        0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };

    /* F, G, H and I are basic MD5 functions.
    */
    #define F(x, y, z) (((x) & (y)) | ((~x) & (z)))
    #define G(x, y, z) (((x) & (z)) | ((y) & (~z)))
    #define H(x, y, z) ((x) ^ (y) ^ (z))
    #define I(x, y, z) ((y) ^ ((x) | (~z)))

    /* ROTATE_LEFT rotates x left n bits.
    */
    #define ROTATE_LEFT(x, n) (((x) << (n)) | ((x) >> (32-(n))))

    /* FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4.
    Rotation is separate from addition to prevent recomputation.
    */
    #define FF(a, b, c, d, x, s, ac) { \
        (a) += F ((b), (c), (d)) + (x) + (UINT4)(ac); \
        (a) = ROTATE_LEFT ((a), (s)); \
        (a) += (b); \
    }
    #define GG(a, b, c, d, x, s, ac) { \
        (a) += G ((b), (c), (d)) + (x) + (UINT4)(ac); \
        (a) = ROTATE_LEFT ((a), (s)); \
        (a) += (b); \
    }
    #define HH(a, b, c, d, x, s, ac) { \
        (a) += H ((b), (c), (d)) + (x) + (UINT4)(ac); \
        (a) = ROTATE_LEFT ((a), (s)); \
        (a) += (b); \
    }
    #define II(a, b, c, d, x, s, ac) { \
        (a) += I ((b), (c), (d)) + (x) + (UINT4)(ac); \
        (a) = ROTATE_LEFT ((a), (s)); \
        (a) += (b); \
    }

    /* MD5 initialization. Begins an MD5 operation, writing a new context.
    */
    void MD5Init (context)
    MD5_CTX *context;                                        /* context */
    {
        context->count[0] = context->count[1] = 0;
        /* Load magic initialization constants.
        */
        context->state[0] = 0x67452301;
        context->state[1] = 0xefcdab89;
        context->state[2] = 0x98badcfe;
        context->state[3] = 0x10325476;
    }

    /* MD5 block update operation. Continues an MD5 message-digest
    operation, processing another message block, and updating the
    context.
    */
    void MD5Update (context, input, inputLen)
    MD5_CTX *context;                                        /* context */
    unsigned char *input;                                /* input block */
    unsigned int inputLen;                     /* length of input block */
    {
        unsigned int i, index, partLen;

        /* Compute number of bytes mod 64 */
        index = (unsigned int)((context->count[0] >> 3) & 0x3F);

        /* Update number of bits */
        if ((context->count[0] += ((UINT4)inputLen << 3)) < ((UINT4)inputLen << 3))
            context->count[1]++;
        context->count[1] += ((UINT4)inputLen >> 29);

        partLen = 64 - index;

        /* Transform as many times as possible.
        */
        if (inputLen >= partLen) {
            MD5_memcpy ((POINTER)&context->buffer[index], (POINTER)input, partLen);
            MD5Transform (context->state, context->buffer);

            for (i = partLen; i + 63 < inputLen; i += 64)
                MD5Transform (context->state, &input[i]);

            index = 0;
        }
        else
            i = 0;

        /* Buffer remaining input */
        MD5_memcpy((POINTER)&context->buffer[index], (POINTER)&input[i], inputLen-i);
    }

    /* MD5 finalization. Ends an MD5 message-digest operation, writing the
    the message digest and zeroizing the context.
    */
    void MD5Final (digest, context)
    unsigned char digest[16];                         /* message digest */
    MD5_CTX *context;                                       /* context */
    {
        unsigned char bits[8];
        unsigned int index, padLen;

        /* Save number of bits */
        Encode (bits, context->count, 8);

        /* Pad out to 56 mod 64.
        */
        index = (unsigned int)((context->count[0] >> 3) & 0x3f);
        padLen = (index < 56) ? (56 - index) : (120 - index);
        MD5Update (context, PADDING, padLen);

        /* Append length (before padding) */
        MD5Update (context, bits, 8);

        /* Store state in digest */
        Encode (digest, context->state, 16);

        /* Zeroize sensitive information.
        */
        MD5_memset ((POINTER)context, 0, sizeof (*context));
    }

    /* MD5 basic transformation. Transforms state based on block.
    */
    static void MD5Transform (state, block)
    UINT4 state[4];
    unsigned char block[64];
    {
        UINT4 a = state[0], b = state[1], c = state[2], d = state[3], x[16];

        Decode (x, block, 64);

        /* Round 1 */
        FF (a, b, c, d, x[ 0], S11, 0xd76aa478); /* 1 */
        FF (d, a, b, c, x[ 1], S12, 0xe8c7b756); /* 2 */
        FF (c, d, a, b, x[ 2], S13, 0x242070db); /* 3 */
        FF (b, c, d, a, x[ 3], S14, 0xc1bdceee); /* 4 */
        FF (a, b, c, d, x[ 4], S11, 0xf57c0faf); /* 5 */
        FF (d, a, b, c, x[ 5], S12, 0x4787c62a); /* 6 */
        FF (c, d, a, b, x[ 6], S13, 0xa8304613); /* 7 */
        FF (b, c, d, a, x[ 7], S14, 0xfd469501); /* 8 */
        FF (a, b, c, d, x[ 8], S11, 0x698098d8); /* 9 */
        FF (d, a, b, c, x[ 9], S12, 0x8b44f7af); /* 10 */
        FF (c, d, a, b, x[10], S13, 0xffff5bb1); /* 11 */
        FF (b, c, d, a, x[11], S14, 0x895cd7be); /* 12 */
        FF (a, b, c, d, x[12], S11, 0x6b901122); /* 13 */
        FF (d, a, b, c, x[13], S12, 0xfd987193); /* 14 */
        FF (c, d, a, b, x[14], S13, 0xa679438e); /* 15 */
        FF (b, c, d, a, x[15], S14, 0x49b40821); /* 16 */

        /* Round 2 */
        GG (a, b, c, d, x[ 1], S21, 0xf61e2562); /* 17 */
        GG (d, a, b, c, x[ 6], S22, 0xc040b340); /* 18 */
        GG (c, d, a, b, x[11], S23, 0x265e5a51); /* 19 */
        GG (b, c, d, a, x[ 0], S24, 0xe9b6c7aa); /* 20 */
        GG (a, b, c, d, x[ 5], S21, 0xd62f105d); /* 21 */
        GG (d, a, b, c, x[10], S22,  0x2441453); /* 22 */
        GG (c, d, a, b, x[15], S23, 0xd8a1e681); /* 23 */
        GG (b, c, d, a, x[ 4], S24, 0xe7d3fbc8); /* 24 */
        GG (a, b, c, d, x[ 9], S21, 0x21e1cde6); /* 25 */
        GG (d, a, b, c, x[14], S22, 0xc33707d6); /* 26 */
        GG (c, d, a, b, x[ 3], S23, 0xf4d50d87); /* 27 */

        GG (b, c, d, a, x[ 8], S24, 0x455a14ed); /* 28 */
        GG (a, b, c, d, x[13], S21, 0xa9e3e905); /* 29 */
        GG (d, a, b, c, x[ 2], S22, 0xfcefa3f8); /* 30 */
        GG (c, d, a, b, x[ 7], S23, 0x676f02d9); /* 31 */
        GG (b, c, d, a, x[12], S24, 0x8d2a4c8a); /* 32 */

        /* Round 3 */
        HH (a, b, c, d, x[ 5], S31, 0xfffa3942); /* 33 */
        HH (d, a, b, c, x[ 8], S32, 0x8771f681); /* 34 */
        HH (c, d, a, b, x[11], S33, 0x6d9d6122); /* 35 */
        HH (b, c, d, a, x[14], S34, 0xfde5380c); /* 36 */
        HH (a, b, c, d, x[ 1], S31, 0xa4beea44); /* 37 */
        HH (d, a, b, c, x[ 4], S32, 0x4bdecfa9); /* 38 */
        HH (c, d, a, b, x[ 7], S33, 0xf6bb4b60); /* 39 */
        HH (b, c, d, a, x[10], S34, 0xbebfbc70); /* 40 */
        HH (a, b, c, d, x[13], S31, 0x289b7ec6); /* 41 */
        HH (d, a, b, c, x[ 0], S32, 0xeaa127fa); /* 42 */
        HH (c, d, a, b, x[ 3], S33, 0xd4ef3085); /* 43 */
        HH (b, c, d, a, x[ 6], S34,  0x4881d05); /* 44 */
        HH (a, b, c, d, x[ 9], S31, 0xd9d4d039); /* 45 */
        HH (d, a, b, c, x[12], S32, 0xe6db99e5); /* 46 */
        HH (c, d, a, b, x[15], S33, 0x1fa27cf8); /* 47 */
        HH (b, c, d, a, x[ 2], S34, 0xc4ac5665); /* 48 */

        /* Round 4 */
        II (a, b, c, d, x[ 0], S41, 0xf4292244); /* 49 */
        II (d, a, b, c, x[ 7], S42, 0x432aff97); /* 50 */
        II (c, d, a, b, x[14], S43, 0xab9423a7); /* 51 */
        II (b, c, d, a, x[ 5], S44, 0xfc93a039); /* 52 */
        II (a, b, c, d, x[12], S41, 0x655b59c3); /* 53 */
        II (d, a, b, c, x[ 3], S42, 0x8f0ccc92); /* 54 */
        II (c, d, a, b, x[10], S43, 0xffeff47d); /* 55 */
        II (b, c, d, a, x[ 1], S44, 0x85845dd1); /* 56 */
        II (a, b, c, d, x[ 8], S41, 0x6fa87e4f); /* 57 */
        II (d, a, b, c, x[15], S42, 0xfe2ce6e0); /* 58 */
        II (c, d, a, b, x[ 6], S43, 0xa3014314); /* 59 */
        II (b, c, d, a, x[13], S44, 0x4e0811a1); /* 60 */
        II (a, b, c, d, x[ 4], S41, 0xf7537e82); /* 61 */
        II (d, a, b, c, x[11], S42, 0xbd3af235); /* 62 */
        II (c, d, a, b, x[ 2], S43, 0x2ad7d2bb); /* 63 */
        II (b, c, d, a, x[ 9], S44, 0xeb86d391); /* 64 */

        state[0] += a;
        state[1] += b;
        state[2] += c;
        state[3] += d;

        /* Zeroize sensitive information.

        */
        MD5_memset ((POINTER)x, 0, sizeof (x));
    }

    /* Encodes input (UINT4) into output (unsigned char). Assumes len is
    a multiple of 4.
    */
    static void Encode (output, input, len)
    unsigned char *output;
    UINT4 *input;
    unsigned int len;
    {
        unsigned int i, j;

        for (i = 0, j = 0; j < len; i++, j += 4) {
            output[j] = (unsigned char)(input[i] & 0xff);
            output[j+1] = (unsigned char)((input[i] >> 8) & 0xff);
            output[j+2] = (unsigned char)((input[i] >> 16) & 0xff);
            output[j+3] = (unsigned char)((input[i] >> 24) & 0xff);
        }
    }

    /* Decodes input (unsigned char) into output (UINT4). Assumes len is
    a multiple of 4.
    */
    static void Decode (output, input, len)
    UINT4 *output;
    unsigned char *input;
    unsigned int len;
    {
        unsigned int i, j;

        for (i = 0, j = 0; j < len; i++, j += 4)
        output[i] = ((UINT4)input[j]) | (((UINT4)input[j+1]) << 8) | 
          (((UINT4)input[j+2]) << 16) | (((UINT4)input[j+3]) << 24);
    }

    /* Note: Replace "for loop" with standard memcpy if possible.
    */

    static void MD5_memcpy (output, input, len)
    POINTER output;
    POINTER input;
    unsigned int len;
    {
        unsigned int i;

        for (i = 0; i < len; i++)
            output[i] = input[i];
    }

    /* Note: Replace "for loop" with standard memset if possible.
    */
    static void MD5_memset (output, value, len)
    POINTER output;
    int value;
    unsigned int len;
    {
        unsigned int i;

        for (i = 0; i < len; i++)
            ((char *)output)[i] = (char)value;
    }

A.4 mddriver.c
~~~~~~~~~~~~~~~

.. code-block:: c

    /* MDDRIVER.C - test driver for MD2, MD4 and MD5
    */

    /* Copyright (C) 1990-2, RSA Data Security, Inc. Created 1990. All
    rights reserved.

    RSA Data Security, Inc. makes no representations concerning either
    the merchantability of this software or the suitability of this
    software for any particular purpose. It is provided "as is"
    without express or implied warranty of any kind.

    These notices must be retained in any copies of any part of this
    documentation and/or software.
    */

    /* The following makes MD default to MD5 if it has not already been
    defined with C compiler flags.
    */
    #ifndef MD
    #define MD MD5
    #endif

    #include <stdio.h>
    #include <time.h>
    #include <string.h>
    #include "global.h"
    #if MD == 2
    #include "md2.h"
    #endif
    #if MD == 4

    #include "md4.h"
    #endif
    #if MD == 5
    #include "md5.h"
    #endif

    /* Length of test block, number of test blocks.
    */
    #define TEST_BLOCK_LEN 1000
    #define TEST_BLOCK_COUNT 1000

    static void MDString PROTO_LIST ((char *));
    static void MDTimeTrial PROTO_LIST ((void));
    static void MDTestSuite PROTO_LIST ((void));
    static void MDFile PROTO_LIST ((char *));
    static void MDFilter PROTO_LIST ((void));
    static void MDPrint PROTO_LIST ((unsigned char [16]));

    #if MD == 2
    #define MD_CTX MD2_CTX
    #define MDInit MD2Init
    #define MDUpdate MD2Update
    #define MDFinal MD2Final
    #endif
    #if MD == 4
    #define MD_CTX MD4_CTX
    #define MDInit MD4Init
    #define MDUpdate MD4Update
    #define MDFinal MD4Final
    #endif
    #if MD == 5
    #define MD_CTX MD5_CTX
    #define MDInit MD5Init
    #define MDUpdate MD5Update
    #define MDFinal MD5Final
    #endif

    /* Main driver.

    Arguments (may be any combination):
        -sstring - digests string
        -t       - runs time trial
        -x       - runs test script
        filename - digests file
        (none)   - digests standard input
    */
    int main (argc, argv)
    int argc;

    char *argv[];
    {
        int i;

        if (argc > 1)
        for (i = 1; i < argc; i++)
            if (argv[i][0] == '-' && argv[i][1] == 's')
                MDString (argv[i] + 2);
            else if (strcmp (argv[i], "-t") == 0)
                MDTimeTrial ();
            else if (strcmp (argv[i], "-x") == 0)
                MDTestSuite ();
            else
                MDFile (argv[i]);
            else
                MDFilter ();

        return (0);
    }

    /* Digests a string and prints the result.
    */
    static void MDString (string)
    char *string;
    {
        MD_CTX context;
        unsigned char digest[16];
        unsigned int len = strlen (string);

        MDInit (&context);
        MDUpdate (&context, string, len);
        MDFinal (digest, &context);

        printf ("MD%d (\"%s\") = ", MD, string);
        MDPrint (digest);
        printf ("\n");
    }

    /* Measures the time to digest TEST_BLOCK_COUNT TEST_BLOCK_LEN-byte
    blocks.
    */
    static void MDTimeTrial ()
    {
        MD_CTX context;
        time_t endTime, startTime;
        unsigned char block[TEST_BLOCK_LEN], digest[16];
        unsigned int i;

        printf("MD%d time trial. Digesting %d %d-byte blocks ...", MD,
          TEST_BLOCK_LEN, TEST_BLOCK_COUNT);

        /* Initialize block */
        for (i = 0; i < TEST_BLOCK_LEN; i++)
            block[i] = (unsigned char)(i & 0xff);

        /* Start timer */
        time (&startTime);

        /* Digest blocks */
        MDInit (&context);
        for (i = 0; i < TEST_BLOCK_COUNT; i++)
            MDUpdate (&context, block, TEST_BLOCK_LEN);
        MDFinal (digest, &context);

        /* Stop timer */
        time (&endTime);

        printf (" done\n");
        printf ("Digest = ");
        MDPrint (digest);
        printf ("\nTime = %ld seconds\n", (long)(endTime-startTime));
        printf ("Speed = %ld bytes/second\n",
            (long)TEST_BLOCK_LEN * (long)TEST_BLOCK_COUNT/(endTime-startTime));
    }

    /* Digests a reference suite of strings and prints the results.
    */
    static void MDTestSuite ()
    {
        printf ("MD%d test suite:\n", MD);

        MDString ("");
        MDString ("a");
        MDString ("abc");
        MDString ("message digest");
        MDString ("abcdefghijklmnopqrstuvwxyz");
        MDString
        ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789");
        MDString
        ("1234567890123456789012345678901234567890\
        1234567890123456789012345678901234567890");
    }

    /* Digests a file and prints the result.

    */
    static void MDFile (filename)
    char *filename;
    {
        FILE *file;
        MD_CTX context;
        int len;
        unsigned char buffer[1024], digest[16];

        if ((file = fopen (filename, "rb")) == NULL)
            printf ("%s can't be opened\n", filename);

        else {
            MDInit (&context);
            while (len = fread (buffer, 1, 1024, file))
            MDUpdate (&context, buffer, len);
            MDFinal (digest, &context);

            fclose (file);

            printf ("MD%d (%s) = ", MD, filename);
            MDPrint (digest);
            printf ("\n");
        }
    }

    /* Digests the standard input and prints the result.
    */
    static void MDFilter ()
    {
        MD_CTX context;
        int len;
        unsigned char buffer[16], digest[16];

        MDInit (&context);
        while (len = fread (buffer, 1, 16, stdin))
            MDUpdate (&context, buffer, len);
        MDFinal (digest, &context);

        MDPrint (digest);
        printf ("\n");
    }

    /* Prints a message digest in hexadecimal.
    */
    static void MDPrint (digest)
    unsigned char digest[16];
    {

        unsigned int i;

        for (i = 0; i < 16; i++)
            printf ("%02x", digest[i]);
    }

A.5 Test suite
~~~~~~~~~~~~~~~~

MD5测试套件（驱动程序选项“ -x”）应打印以下结果：

.. code-block::

    MD5 test suite:
    MD5 ("") = d41d8cd98f00b204e9800998ecf8427e
    MD5 ("a") = 0cc175b9c0f1b6a831c399e269772661
    MD5 ("abc") = 900150983cd24fb0d6963f7d28e17f72
    MD5 ("message digest") = f96b697d7cb7938d525a2f31aaf161d0
    MD5 ("abcdefghijklmnopqrstuvwxyz") = c3fcd3d76192e4007dfb496cca67e13b
    MD5 ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789") =
    d174ab98d277d9f5a5611c2c9f419d9f
    MD5 ("123456789012345678901234567890123456789012345678901234567890123456
    78901234567890") = 57edf4a22be3c955ac49da2e2107b67a

.. _安全注意事项:

安全注意事项
------------

本备忘录中讨论的安全级别被认为足以实现基于MD5和公共密钥密码系统的非常高安全\
性的混合数字签名方案。

.. _作者地址:

作者地址
--------

Ronald L. Rivest

Massachusetts Institute of Technology

Laboratory for Computer Science

NE43-324

545 Technology Square

Cambridge, MA  02139-1986

:Phone: \(617\) 253-5880

:EMail: rivest@theory.lcs.mit.edu
