##############################################################################
Base16, Base32 和 Base64 数据编码
##############################################################################

::

    Network Working Group                                  S. Josefsson, Ed.
    Request for Comments: 3548                                     July 2003
    Category: Informational

关于本备忘录
    此备忘录为互联网社区提供信息。 它并没有指定任何类型的互联网标准。 本备忘录的分发\
    不受限制。

版权声明
    Copyright (C) The Internet Society (2003).  All Rights Reserved.

摘要
    本文件描述了常用的 Base 64、 Base 32 和 Base 16 编码方案。 它还讨论了编码数据\
    中换行的使用， 编码数据中填充的使用， 编码数据中非字母字符的使用， 以及不同编码\
    字母的使用。

目录

.. contents::

******************************************************************************
1. 引言
******************************************************************************

在许多情况下， 数据的 Base 编码用于在环境中存储或传输数据， 可能由于遗留原因， 这些\
环境受仅适用于 US-ASCII [9] 的数据。 Base 编码也可以用于新的没有遗留限制的应用程序， \
因为它使用文本编辑器操作对象。 

在过去， 不同的应用程序有不同的要求， 因此有时 Base 编码的实现方式略有不同。 今天， \
协议规范有时会使用一般的 Base 编码， 特别是 "Base64"， 但没有精确的描述或参考。 \
Mime [3] 经常被用作 Base64 的参考， 而没有考虑换行和非字母字符的结果。 本规范的目的\
是建立常用字母表和编码因素的考量。 这将有助于减少其他文件中的模糊性， 从而提高互操作\
性。 

本文件中的 "MUST"、 "MUST NOT"、 "REQUIRED"、 "SHALL"、 "SHALL NOT"、 \
"SHOULD"、 "SHOULD NOT"、 "RECOMMENDED"、 "MAY" 和 "OPTIONAL" 关键词应按照 \
RFC 2119 [1] 中的说明加以解释。

******************************************************************************
2. 执行上的差异
******************************************************************************

在这里我们讨论了过去 Base 编码实现之间的差异， 并在适当的时候， 为未来推荐特定的行为。

2.1. 编码数据中的换行
==============================================================================

MIME [3] 通常用作 base 64 编码的参考。 然而， MIME 本身并没有定义 “Base 64”， 而是\
定义了 “base 64 Content-Transfer-Encoding”， 以便在 MIME 中使用。 因此， MIME 将 \
Base 64 编码的数据的行长度限制为 76 个字符。 MIME 继承了 PEM [2] 的编码， 声明它 \
“几乎完全相同”， 但是 PEM 使用 64 个字符的行长。 MIME 和 PEM 的限制都取决于 SMTP \
内的限制。

除非参考本文档的规范明确指示 Base 编码器在特定数量的字符后添加换行符， 否则实现不得\
向基本编码数据添加换行符。

2.2. 编码数据的填充
==============================================================================

在某些情况下， 不需要也不会在 Base 编码数据中使用填充 （“=”）。 在一般情况下， 当无\
法对传输数据的大小进行假设时， 需要进行填充以产生正确的解码数据。 

除非引用本文档的规范另有明确说明， 否则实现必须在编码数据的末尾包含适当的填充字符。

2.3. 编码数据中非字母字符的解释
==============================================================================

Base 编码使用特定的、 简化的字母表来编码二进制数据。 由于数据损坏或设计原因， Base \
编码数据中可能存在非字母字符。 非字母字符可能被用作 “隐蔽通道”， 其中可以出于恶意目\
的发送非协议数据。 也可能发送非字母字符以利用导致例如缓冲区溢出攻击的实现错误。

如果在解释 Base 编码数据时包含基本字母表之外的字符， 则实现必须拒绝编码， 除非参考本\
文档的规范另有明确说明。 像 MIME 一样， 此类规范可能会改为声明在解释数据时应简单地忽\
略 Base 编码字母表之外的字符 （“在您接受的内容中保持自由”）。 请注意， 这意味着任何 \
CRLF 都构成 “非字母字符” 并被忽略。 此外， 这样的规范可能会考虑填充字符 “=”， 直到字\
符串结束时才将其视为 Base 字母表的一部分。 如果在字符串末尾找到超过允许数量的填充字\
符， 例如， 以 “===” 结尾的 Base64 字符串， 则可以忽略多余的填充字符。






